So firstly, let's go through some important points and this is when it comes on to application development

and deployment.

So a lot of companies will have developers that actually go ahead and develop an application.

This could be a desktop based application.

This could be a web application.

Once the application is developed

The next stage is to go ahead and deploy the application.

You could deploy this application on a set of physical servers, and then you'll have your I.T. operations

team that actually go out and manage not only probably the physical servers, but the applications that

are deployed on those physical servers.

So the first step is obviously to develop your application and the next step is to deploy your application.

Your application needs to be hosted on some sort of infrastructure.

By infrastructure, I mean servers.

Servers are required for hosting your application.

Now companies might have their own data centers wherein they have physical servers in place that can

be used for hosting applications.

But in today's world, a lot of companies are now adopting the cloud.

They could use cloud providers such as Azure, Amazon Web services or even Google when it comes on to managing

their infrastructure.

So here, one of the biggest points is having your infrastructure in place.

In order to have or host your application, you need to deploy your infrastructure.

If you look at a very simple example, when it comes on the deployment of infrastructure, you could

have probably an application server that can be used for hosting, let's say, your web application.

You could have a database server that has the data that's accessed by the application.

So in a very simple setup, you might have one server I said, for hosting your application and another

server for hosting the database engine for hosting your data.

So you need to deploy your infrastructure.

And secondly, you need to configure your infrastructure and then you host your application on this

infrastructure set up.

Now, once this is done, obviously during the course of your application, there could be improvements

to your application.

You might have users who are requesting for new features for the application itself.

Now, these new features could also warrant for changes to your infrastructure.

For example, let's say that your application has become quite popular and now a lot of users are using

the application.

You might need to add changes at the infrastructure level to scale your application.

You might need to have auto scaling features or add high availability to the application infrastructure.

So not only do you have the task of deploying the infrastructure, but you also have the task of maintaining

the infrastructure over time and managing changes to your infrastructure.

So you might need to deploy more servers in place to have high availability.

All of this can be part of your application roadmap.

Next when you want to test newer features of your application, normally companies might have a separate

environment in place, a test environment that could have, again, its own application server and a

database server.

So when developers develop new features, they then build the application and test the application in

the test environment.

And once testing is complete, the application can be deployed in the actual production based environment.

So now not only do you need to manage the infrastructure in your production based environment, but

you also need to manage the infrastructure in your test environment.

And normally in a test environment now that we have actually cloud adoption.

Companies look towards actually destroying the test environment after the testing is complete because

after testing is complete, maybe you don't need to have the application server in place.

This is in the test environment and you don't need to have the database server.

This actually helps to save on cost.

Why would you want to have infrastructure running, especially in the cloud when it's not required?

Then after some time you might need to recreate your test environment.

So it's really a task in order to destroy the environment and then recreate the environment.

So is there an easier way that you can actually manage the environment itself?

That's where you start using tools which are used for building infrastructure as Code You what happens is that you actually define the infrastructure that you want in a code file.

Once you have this court file in place, this court file can then be used to automatically provision,

let's say, an application server and a database server.

The advantages of using infrastructure passcode is you can change the code whenever required.

So if you need more service, you can just add it on to the code file.

You can share and collaborate on the code file itself and you can create different versions of the code

file.

And especially when you're looking at cloud providers such as your Amazon Web services, etc..

I said it's very important to manage your infrastructure in the most efficient manner.

Normally, cloud platforms follow the pay as you go model, where you only pay based on how much you

use.

That's why it's very important to ensure that you only have infrastructure running when it is really

required.

Now a lot of cloud providers actually have their own tools when it comes on to building infrastructure as Code.

And again, please know that at this point in time, if you don't understand infrastructure as code don't worry.

That's why we're going into TerraForm has we start working with TerraForm.

You will understand this concept of infrastructure has code.

I said a lot of providers are creating their own tools for building infrastructure has code, but normally

that infrastructure has code will only work with that particular cloud provider.

For example, if you look at Azure, so they have tools such as air and templates and even bicep based

templates, but normally works with building resources on the platform itself.

But what's popular with TerraForm is it can actually work with a variety of cloud platforms.

They actually have this concept of providers wherein if you define the code template, you can define

a code template that could work with defining resources on the platform.

You can define a code template using the same underlying language to develop resources on the Amazon

Web Services platform.

So there are different plugins that allow you to work with different cloud providers, different SaaS

providers.

It's not just stuck onto just one particular platform.

That's why it's very popular.

The native language that's used in TerraForm, that's SQL is quite human readable, so it becomes easy

to understand what the code is trying to do.

Since it's an open source project, you do have an avid community that always contributes on improving

the working of TerraForm itself.

So that's why in today's world, it's quite important to have a tool that helps you to build infrastructure as Code because there are just so many requirements when it comes on to managing the infrastructure itself.
